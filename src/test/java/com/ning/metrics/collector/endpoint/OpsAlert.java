/*
 * Copyright 2010-2011 Ning, Inc.
 *
 * Ning licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

package com.ning.metrics.collector.endpoint;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class OpsAlert implements org.apache.thrift.TBase<OpsAlert, OpsAlert._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpsAlert");

    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField ALERT_FIELD_DESC = new org.apache.thrift.protocol.TField("alert", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField EVENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_date", org.apache.thrift.protocol.TType.I64, (short) 5);

    public String source;
    public String from;
    public String to;
    public String alert;
    public long event_date;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        SOURCE((short) 1, "source"),
        FROM((short) 2, "from"),
        TO((short) 3, "to"),
        ALERT((short) 4, "alert"),
        EVENT_DATE((short) 5, "event_date");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId) {
                case 1: // SOURCE
                    return SOURCE;
                case 2: // FROM
                    return FROM;
                case 3: // TO
                    return TO;
                case 4: // ALERT
                    return ALERT;
                case 5: // EVENT_DATE
                    return EVENT_DATE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __EVENT_DATE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ALERT, new org.apache.thrift.meta_data.FieldMetaData("alert", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.EVENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("event_date", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpsAlert.class, metaDataMap);
    }

    public OpsAlert()
    {
    }

    public OpsAlert(
        String source,
        String from,
        String to,
        String alert,
        long event_date)
    {
        this();
        this.source = source;
        this.from = from;
        this.to = to;
        this.alert = alert;
        this.event_date = event_date;
        setEvent_dateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OpsAlert(OpsAlert other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetSource()) {
            this.source = other.source;
        }
        if (other.isSetFrom()) {
            this.from = other.from;
        }
        if (other.isSetTo()) {
            this.to = other.to;
        }
        if (other.isSetAlert()) {
            this.alert = other.alert;
        }
        this.event_date = other.event_date;
    }

    public OpsAlert deepCopy()
    {
        return new OpsAlert(this);
    }

    @Override
    public void clear()
    {
        this.source = null;
        this.from = null;
        this.to = null;
        this.alert = null;
        setEvent_dateIsSet(false);
        this.event_date = 0;
    }

    public String getSource()
    {
        return this.source;
    }

    public OpsAlert setSource(String source)
    {
        this.source = source;
        return this;
    }

    public void unsetSource()
    {
        this.source = null;
    }

    /**
     * Returns true if field source is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSource()
    {
        return this.source != null;
    }

    public void setSourceIsSet(boolean value)
    {
        if (!value) {
            this.source = null;
        }
    }

    public String getFrom()
    {
        return this.from;
    }

    public OpsAlert setFrom(String from)
    {
        this.from = from;
        return this;
    }

    public void unsetFrom()
    {
        this.from = null;
    }

    /**
     * Returns true if field from is set (has been assigned a value) and false otherwise
     */
    public boolean isSetFrom()
    {
        return this.from != null;
    }

    public void setFromIsSet(boolean value)
    {
        if (!value) {
            this.from = null;
        }
    }

    public String getTo()
    {
        return this.to;
    }

    public OpsAlert setTo(String to)
    {
        this.to = to;
        return this;
    }

    public void unsetTo()
    {
        this.to = null;
    }

    /**
     * Returns true if field to is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTo()
    {
        return this.to != null;
    }

    public void setToIsSet(boolean value)
    {
        if (!value) {
            this.to = null;
        }
    }

    public String getAlert()
    {
        return this.alert;
    }

    public OpsAlert setAlert(String alert)
    {
        this.alert = alert;
        return this;
    }

    public void unsetAlert()
    {
        this.alert = null;
    }

    /**
     * Returns true if field alert is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAlert()
    {
        return this.alert != null;
    }

    public void setAlertIsSet(boolean value)
    {
        if (!value) {
            this.alert = null;
        }
    }

    public long getEvent_date()
    {
        return this.event_date;
    }

    public OpsAlert setEvent_date(long event_date)
    {
        this.event_date = event_date;
        setEvent_dateIsSet(true);
        return this;
    }

    public void unsetEvent_date()
    {
        __isset_bit_vector.clear(__EVENT_DATE_ISSET_ID);
    }

    /**
     * Returns true if field event_date is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEvent_date()
    {
        return __isset_bit_vector.get(__EVENT_DATE_ISSET_ID);
    }

    public void setEvent_dateIsSet(boolean value)
    {
        __isset_bit_vector.set(__EVENT_DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field) {
            case SOURCE:
                if (value == null) {
                    unsetSource();
                }
                else {
                    setSource((String) value);
                }
                break;

            case FROM:
                if (value == null) {
                    unsetFrom();
                }
                else {
                    setFrom((String) value);
                }
                break;

            case TO:
                if (value == null) {
                    unsetTo();
                }
                else {
                    setTo((String) value);
                }
                break;

            case ALERT:
                if (value == null) {
                    unsetAlert();
                }
                else {
                    setAlert((String) value);
                }
                break;

            case EVENT_DATE:
                if (value == null) {
                    unsetEvent_date();
                }
                else {
                    setEvent_date((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field) {
            case SOURCE:
                return getSource();

            case FROM:
                return getFrom();

            case TO:
                return getTo();

            case ALERT:
                return getAlert();

            case EVENT_DATE:
                return new Long(getEvent_date());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case SOURCE:
                return isSetSource();
            case FROM:
                return isSetFrom();
            case TO:
                return isSetTo();
            case ALERT:
                return isSetAlert();
            case EVENT_DATE:
                return isSetEvent_date();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null) {
            return false;
        }
        if (that instanceof OpsAlert) {
            return this.equals((OpsAlert) that);
        }
        return false;
    }

    public boolean equals(OpsAlert that)
    {
        if (that == null) {
            return false;
        }

        boolean this_present_source = true && this.isSetSource();
        boolean that_present_source = true && that.isSetSource();
        if (this_present_source || that_present_source) {
            if (!(this_present_source && that_present_source)) {
                return false;
            }
            if (!this.source.equals(that.source)) {
                return false;
            }
        }

        boolean this_present_from = true && this.isSetFrom();
        boolean that_present_from = true && that.isSetFrom();
        if (this_present_from || that_present_from) {
            if (!(this_present_from && that_present_from)) {
                return false;
            }
            if (!this.from.equals(that.from)) {
                return false;
            }
        }

        boolean this_present_to = true && this.isSetTo();
        boolean that_present_to = true && that.isSetTo();
        if (this_present_to || that_present_to) {
            if (!(this_present_to && that_present_to)) {
                return false;
            }
            if (!this.to.equals(that.to)) {
                return false;
            }
        }

        boolean this_present_alert = true && this.isSetAlert();
        boolean that_present_alert = true && that.isSetAlert();
        if (this_present_alert || that_present_alert) {
            if (!(this_present_alert && that_present_alert)) {
                return false;
            }
            if (!this.alert.equals(that.alert)) {
                return false;
            }
        }

        boolean this_present_event_date = true;
        boolean that_present_event_date = true;
        if (this_present_event_date || that_present_event_date) {
            if (!(this_present_event_date && that_present_event_date)) {
                return false;
            }
            if (this.event_date != that.event_date) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(OpsAlert other)
    {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        OpsAlert typedOther = (OpsAlert) other;

        lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSource()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFrom()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTo()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAlert()).compareTo(typedOther.isSetAlert());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAlert()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alert, typedOther.alert);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEvent_date()).compareTo(typedOther.isSetEvent_date());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEvent_date()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_date, typedOther.event_date);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // SOURCE
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.source = iprot.readString();
                    }
                    else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // FROM
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.from = iprot.readString();
                    }
                    else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // TO
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.to = iprot.readString();
                    }
                    else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // ALERT
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.alert = iprot.readString();
                    }
                    else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // EVENT_DATE
                    if (field.type == org.apache.thrift.protocol.TType.I64) {
                        this.event_date = iprot.readI64();
                        setEvent_dateIsSet(true);
                    }
                    else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.source != null) {
            oprot.writeFieldBegin(SOURCE_FIELD_DESC);
            oprot.writeString(this.source);
            oprot.writeFieldEnd();
        }
        if (this.from != null) {
            oprot.writeFieldBegin(FROM_FIELD_DESC);
            oprot.writeString(this.from);
            oprot.writeFieldEnd();
        }
        if (this.to != null) {
            oprot.writeFieldBegin(TO_FIELD_DESC);
            oprot.writeString(this.to);
            oprot.writeFieldEnd();
        }
        if (this.alert != null) {
            oprot.writeFieldBegin(ALERT_FIELD_DESC);
            oprot.writeString(this.alert);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EVENT_DATE_FIELD_DESC);
        oprot.writeI64(this.event_date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("OpsAlert(");
        boolean first = true;

        sb.append("source:");
        if (this.source == null) {
            sb.append("null");
        }
        else {
            sb.append(this.source);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("from:");
        if (this.from == null) {
            sb.append("null");
        }
        else {
            sb.append(this.from);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("to:");
        if (this.to == null) {
            sb.append("null");
        }
        else {
            sb.append(this.to);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("alert:");
        if (this.alert == null) {
            sb.append("null");
        }
        else {
            sb.append(this.alert);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("event_date:");
        sb.append(this.event_date);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}

