#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Netflow:
  """
  Attributes:
   - event_date
   - start_time
   - end_time
   - duration
   - src_addr
   - dst_addr
   - src_port
   - dst_port
   - protocol
   - flags
   - fwd_status
   - direction
   - src_tos
   - dst_tos
   - input_if
   - output_if
   - src_vlan
   - dst_vlan
   - next_hop_ip
   - bgp_next_ip
   - src_as
   - dst_as
   - src_mask
   - dst_mask
   - input_pack
   - output_pack
   - input_bytes
   - output_bytes
   - in_src_mac
   - out_dst_mac
   - in_dst_mac
   - out_src_mac
   - mpls_1
   - mpls_2
   - mpls_3
   - mpls_4
   - mpls_5
   - mpls_6
   - mpls_7
   - mpls_8
   - mpls_9
   - mpls_10
   - router_ip
   - engine
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'event_date', None, None, ), # 1
    (2, TType.STRING, 'start_time', None, None, ), # 2
    (3, TType.STRING, 'end_time', None, None, ), # 3
    (4, TType.STRING, 'duration', None, None, ), # 4
    (5, TType.STRING, 'src_addr', None, None, ), # 5
    (6, TType.STRING, 'dst_addr', None, None, ), # 6
    (7, TType.STRING, 'src_port', None, None, ), # 7
    (8, TType.STRING, 'dst_port', None, None, ), # 8
    (9, TType.STRING, 'protocol', None, None, ), # 9
    (10, TType.STRING, 'flags', None, None, ), # 10
    (11, TType.STRING, 'fwd_status', None, None, ), # 11
    (12, TType.STRING, 'direction', None, None, ), # 12
    (13, TType.STRING, 'src_tos', None, None, ), # 13
    (14, TType.STRING, 'dst_tos', None, None, ), # 14
    (15, TType.STRING, 'input_if', None, None, ), # 15
    (16, TType.STRING, 'output_if', None, None, ), # 16
    (17, TType.STRING, 'src_vlan', None, None, ), # 17
    (18, TType.STRING, 'dst_vlan', None, None, ), # 18
    (19, TType.STRING, 'next_hop_ip', None, None, ), # 19
    (20, TType.STRING, 'bgp_next_ip', None, None, ), # 20
    (21, TType.STRING, 'src_as', None, None, ), # 21
    (22, TType.STRING, 'dst_as', None, None, ), # 22
    (23, TType.STRING, 'src_mask', None, None, ), # 23
    (24, TType.STRING, 'dst_mask', None, None, ), # 24
    (25, TType.STRING, 'input_pack', None, None, ), # 25
    (26, TType.STRING, 'output_pack', None, None, ), # 26
    (27, TType.STRING, 'input_bytes', None, None, ), # 27
    (28, TType.STRING, 'output_bytes', None, None, ), # 28
    (29, TType.STRING, 'in_src_mac', None, None, ), # 29
    (30, TType.STRING, 'out_dst_mac', None, None, ), # 30
    (31, TType.STRING, 'in_dst_mac', None, None, ), # 31
    (32, TType.STRING, 'out_src_mac', None, None, ), # 32
    (33, TType.STRING, 'mpls_1', None, None, ), # 33
    (34, TType.STRING, 'mpls_2', None, None, ), # 34
    (35, TType.STRING, 'mpls_3', None, None, ), # 35
    (36, TType.STRING, 'mpls_4', None, None, ), # 36
    (37, TType.STRING, 'mpls_5', None, None, ), # 37
    (38, TType.STRING, 'mpls_6', None, None, ), # 38
    (39, TType.STRING, 'mpls_7', None, None, ), # 39
    (40, TType.STRING, 'mpls_8', None, None, ), # 40
    (41, TType.STRING, 'mpls_9', None, None, ), # 41
    (42, TType.STRING, 'mpls_10', None, None, ), # 42
    (43, TType.STRING, 'router_ip', None, None, ), # 43
    (44, TType.STRING, 'engine', None, None, ), # 44
  )

  def __init__(self, event_date=None, start_time=None, end_time=None, duration=None, src_addr=None, dst_addr=None, src_port=None, dst_port=None, protocol=None, flags=None, fwd_status=None, direction=None, src_tos=None, dst_tos=None, input_if=None, output_if=None, src_vlan=None, dst_vlan=None, next_hop_ip=None, bgp_next_ip=None, src_as=None, dst_as=None, src_mask=None, dst_mask=None, input_pack=None, output_pack=None, input_bytes=None, output_bytes=None, in_src_mac=None, out_dst_mac=None, in_dst_mac=None, out_src_mac=None, mpls_1=None, mpls_2=None, mpls_3=None, mpls_4=None, mpls_5=None, mpls_6=None, mpls_7=None, mpls_8=None, mpls_9=None, mpls_10=None, router_ip=None, engine=None,):
    self.event_date = event_date
    self.start_time = start_time
    self.end_time = end_time
    self.duration = duration
    self.src_addr = src_addr
    self.dst_addr = dst_addr
    self.src_port = src_port
    self.dst_port = dst_port
    self.protocol = protocol
    self.flags = flags
    self.fwd_status = fwd_status
    self.direction = direction
    self.src_tos = src_tos
    self.dst_tos = dst_tos
    self.input_if = input_if
    self.output_if = output_if
    self.src_vlan = src_vlan
    self.dst_vlan = dst_vlan
    self.next_hop_ip = next_hop_ip
    self.bgp_next_ip = bgp_next_ip
    self.src_as = src_as
    self.dst_as = dst_as
    self.src_mask = src_mask
    self.dst_mask = dst_mask
    self.input_pack = input_pack
    self.output_pack = output_pack
    self.input_bytes = input_bytes
    self.output_bytes = output_bytes
    self.in_src_mac = in_src_mac
    self.out_dst_mac = out_dst_mac
    self.in_dst_mac = in_dst_mac
    self.out_src_mac = out_src_mac
    self.mpls_1 = mpls_1
    self.mpls_2 = mpls_2
    self.mpls_3 = mpls_3
    self.mpls_4 = mpls_4
    self.mpls_5 = mpls_5
    self.mpls_6 = mpls_6
    self.mpls_7 = mpls_7
    self.mpls_8 = mpls_8
    self.mpls_9 = mpls_9
    self.mpls_10 = mpls_10
    self.router_ip = router_ip
    self.engine = engine

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.event_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.duration = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.src_addr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.dst_addr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.src_port = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.dst_port = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.protocol = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.flags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.fwd_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.direction = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.src_tos = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.dst_tos = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.input_if = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.output_if = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.src_vlan = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.dst_vlan = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.next_hop_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.bgp_next_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.src_as = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.dst_as = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.src_mask = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.dst_mask = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.input_pack = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.output_pack = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.input_bytes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.output_bytes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.in_src_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.out_dst_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.in_dst_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.out_src_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.mpls_1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.mpls_2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.mpls_3 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.mpls_4 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.mpls_5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.mpls_6 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.mpls_7 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.mpls_8 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.mpls_9 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.mpls_10 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.router_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.engine = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Netflow')
    if self.event_date != None:
      oprot.writeFieldBegin('event_date', TType.I64, 1)
      oprot.writeI64(self.event_date)
      oprot.writeFieldEnd()
    if self.start_time != None:
      oprot.writeFieldBegin('start_time', TType.STRING, 2)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.STRING, 3)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.duration != None:
      oprot.writeFieldBegin('duration', TType.STRING, 4)
      oprot.writeString(self.duration)
      oprot.writeFieldEnd()
    if self.src_addr != None:
      oprot.writeFieldBegin('src_addr', TType.STRING, 5)
      oprot.writeString(self.src_addr)
      oprot.writeFieldEnd()
    if self.dst_addr != None:
      oprot.writeFieldBegin('dst_addr', TType.STRING, 6)
      oprot.writeString(self.dst_addr)
      oprot.writeFieldEnd()
    if self.src_port != None:
      oprot.writeFieldBegin('src_port', TType.STRING, 7)
      oprot.writeString(self.src_port)
      oprot.writeFieldEnd()
    if self.dst_port != None:
      oprot.writeFieldBegin('dst_port', TType.STRING, 8)
      oprot.writeString(self.dst_port)
      oprot.writeFieldEnd()
    if self.protocol != None:
      oprot.writeFieldBegin('protocol', TType.STRING, 9)
      oprot.writeString(self.protocol)
      oprot.writeFieldEnd()
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.STRING, 10)
      oprot.writeString(self.flags)
      oprot.writeFieldEnd()
    if self.fwd_status != None:
      oprot.writeFieldBegin('fwd_status', TType.STRING, 11)
      oprot.writeString(self.fwd_status)
      oprot.writeFieldEnd()
    if self.direction != None:
      oprot.writeFieldBegin('direction', TType.STRING, 12)
      oprot.writeString(self.direction)
      oprot.writeFieldEnd()
    if self.src_tos != None:
      oprot.writeFieldBegin('src_tos', TType.STRING, 13)
      oprot.writeString(self.src_tos)
      oprot.writeFieldEnd()
    if self.dst_tos != None:
      oprot.writeFieldBegin('dst_tos', TType.STRING, 14)
      oprot.writeString(self.dst_tos)
      oprot.writeFieldEnd()
    if self.input_if != None:
      oprot.writeFieldBegin('input_if', TType.STRING, 15)
      oprot.writeString(self.input_if)
      oprot.writeFieldEnd()
    if self.output_if != None:
      oprot.writeFieldBegin('output_if', TType.STRING, 16)
      oprot.writeString(self.output_if)
      oprot.writeFieldEnd()
    if self.src_vlan != None:
      oprot.writeFieldBegin('src_vlan', TType.STRING, 17)
      oprot.writeString(self.src_vlan)
      oprot.writeFieldEnd()
    if self.dst_vlan != None:
      oprot.writeFieldBegin('dst_vlan', TType.STRING, 18)
      oprot.writeString(self.dst_vlan)
      oprot.writeFieldEnd()
    if self.next_hop_ip != None:
      oprot.writeFieldBegin('next_hop_ip', TType.STRING, 19)
      oprot.writeString(self.next_hop_ip)
      oprot.writeFieldEnd()
    if self.bgp_next_ip != None:
      oprot.writeFieldBegin('bgp_next_ip', TType.STRING, 20)
      oprot.writeString(self.bgp_next_ip)
      oprot.writeFieldEnd()
    if self.src_as != None:
      oprot.writeFieldBegin('src_as', TType.STRING, 21)
      oprot.writeString(self.src_as)
      oprot.writeFieldEnd()
    if self.dst_as != None:
      oprot.writeFieldBegin('dst_as', TType.STRING, 22)
      oprot.writeString(self.dst_as)
      oprot.writeFieldEnd()
    if self.src_mask != None:
      oprot.writeFieldBegin('src_mask', TType.STRING, 23)
      oprot.writeString(self.src_mask)
      oprot.writeFieldEnd()
    if self.dst_mask != None:
      oprot.writeFieldBegin('dst_mask', TType.STRING, 24)
      oprot.writeString(self.dst_mask)
      oprot.writeFieldEnd()
    if self.input_pack != None:
      oprot.writeFieldBegin('input_pack', TType.STRING, 25)
      oprot.writeString(self.input_pack)
      oprot.writeFieldEnd()
    if self.output_pack != None:
      oprot.writeFieldBegin('output_pack', TType.STRING, 26)
      oprot.writeString(self.output_pack)
      oprot.writeFieldEnd()
    if self.input_bytes != None:
      oprot.writeFieldBegin('input_bytes', TType.STRING, 27)
      oprot.writeString(self.input_bytes)
      oprot.writeFieldEnd()
    if self.output_bytes != None:
      oprot.writeFieldBegin('output_bytes', TType.STRING, 28)
      oprot.writeString(self.output_bytes)
      oprot.writeFieldEnd()
    if self.in_src_mac != None:
      oprot.writeFieldBegin('in_src_mac', TType.STRING, 29)
      oprot.writeString(self.in_src_mac)
      oprot.writeFieldEnd()
    if self.out_dst_mac != None:
      oprot.writeFieldBegin('out_dst_mac', TType.STRING, 30)
      oprot.writeString(self.out_dst_mac)
      oprot.writeFieldEnd()
    if self.in_dst_mac != None:
      oprot.writeFieldBegin('in_dst_mac', TType.STRING, 31)
      oprot.writeString(self.in_dst_mac)
      oprot.writeFieldEnd()
    if self.out_src_mac != None:
      oprot.writeFieldBegin('out_src_mac', TType.STRING, 32)
      oprot.writeString(self.out_src_mac)
      oprot.writeFieldEnd()
    if self.mpls_1 != None:
      oprot.writeFieldBegin('mpls_1', TType.STRING, 33)
      oprot.writeString(self.mpls_1)
      oprot.writeFieldEnd()
    if self.mpls_2 != None:
      oprot.writeFieldBegin('mpls_2', TType.STRING, 34)
      oprot.writeString(self.mpls_2)
      oprot.writeFieldEnd()
    if self.mpls_3 != None:
      oprot.writeFieldBegin('mpls_3', TType.STRING, 35)
      oprot.writeString(self.mpls_3)
      oprot.writeFieldEnd()
    if self.mpls_4 != None:
      oprot.writeFieldBegin('mpls_4', TType.STRING, 36)
      oprot.writeString(self.mpls_4)
      oprot.writeFieldEnd()
    if self.mpls_5 != None:
      oprot.writeFieldBegin('mpls_5', TType.STRING, 37)
      oprot.writeString(self.mpls_5)
      oprot.writeFieldEnd()
    if self.mpls_6 != None:
      oprot.writeFieldBegin('mpls_6', TType.STRING, 38)
      oprot.writeString(self.mpls_6)
      oprot.writeFieldEnd()
    if self.mpls_7 != None:
      oprot.writeFieldBegin('mpls_7', TType.STRING, 39)
      oprot.writeString(self.mpls_7)
      oprot.writeFieldEnd()
    if self.mpls_8 != None:
      oprot.writeFieldBegin('mpls_8', TType.STRING, 40)
      oprot.writeString(self.mpls_8)
      oprot.writeFieldEnd()
    if self.mpls_9 != None:
      oprot.writeFieldBegin('mpls_9', TType.STRING, 41)
      oprot.writeString(self.mpls_9)
      oprot.writeFieldEnd()
    if self.mpls_10 != None:
      oprot.writeFieldBegin('mpls_10', TType.STRING, 42)
      oprot.writeString(self.mpls_10)
      oprot.writeFieldEnd()
    if self.router_ip != None:
      oprot.writeFieldBegin('router_ip', TType.STRING, 43)
      oprot.writeString(self.router_ip)
      oprot.writeFieldEnd()
    if self.engine != None:
      oprot.writeFieldBegin('engine', TType.STRING, 44)
      oprot.writeString(self.engine)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
